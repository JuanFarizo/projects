Basis:
- Different interface requirements
- Can not modify our objects to support every possible interface
- Thus, we use an Adapter, to give us the interface we requiere from the
interface we have

Adapter:
    A construct which adapts an existing 
    interface X to conform to the required interface Y

Adapter Caching:
Fix the problem of generation temporary objects.
We have to know if the point (in this particular case) are generated
and not regenerating again when we need it, so we have to implement
hashcode and equal, and implement a cache in the Adapter:
    public LineToPointAdapter(Line line) {
        hash = line.hashCode();
        if (cache.get(hash) != null)
            return;
        System.out.println(
                String.format("%d: Generating points for line [%d,%d]-[%d,%d] (no caching)",
                        ++count, line.start.x, line.start.y, line.end.x, line.end.y));

        ArrayList<Point> points = new ArrayList<>();

        int left = Math.min(line.start.x, line.end.x);
        int right = Math.max(line.start.x, line.end.x);
        int top = Math.min(line.start.y, line.end.y);
        int bottom = Math.max(line.start.y, line.end.y);
        int dx = right - left;
        int dy = line.end.y - line.start.y;

        if (dx == 0) {
            for (int y = top; y <= bottom; ++y) {
                points.add(new Point(left, y));
            }
        } else if (dy == 0) {
            for (int x = left; x <= right; ++x) {
                points.add(new Point(x, top));
            }
        }
        cache.put(hash, points);
    }


