Basis:
- Different interface requirements
- Can not modify our objects to support every possible interface
- Thus, we use an Adapter, to give us the interface we require from the interface we have (use object composition principle, the adapter implements the interface of one object and wrap the other one)

Adapter:
    A construct which adapts an existing interface X to conform to the required interface Y. This is a special object that converts the interface of one object so that another object can understand it

An adapter wraps one of the objects to hide the complexity of conversion happening behind the scenes. The wrapped object isn’t even aware of the adapter. For example, you can wrap an object that operates in meters and kilometers with an adapter that converts all the data to imperial units such as feet and miles.
1. The adapter gets an interface, compatible with one of the existing objects.
2. Using this interface, the existing object can safely call the adapter’s methods.
3. Upon receiving a call, the adapter passes the request to the second object, but in a format and order that the second object expects.


Adapter Caching:
Fix the problem of generation temporary objects.
We have to know if the point (in this particular case) are generated
and not regenerating again when we need it, so we have to implement
hashcode and equal, and implement a cache in the Adapter:
    public LineToPointAdapter(Line line) {
        hash = line.hashCode();
        if (cache.get(hash) != null)
            return;
        System.out.println(
                String.format("%d: Generating points for line [%d,%d]-[%d,%d] (no caching)",
                        ++count, line.start.x, line.start.y, line.end.x, line.end.y));

        ArrayList<Point> points = new ArrayList<>();

        int left = Math.min(line.start.x, line.end.x);
        int right = Math.max(line.start.x, line.end.x);
        int top = Math.min(line.start.y, line.end.y);
        int bottom = Math.max(line.start.y, line.end.y);
        int dx = right - left;
        int dy = line.end.y - line.start.y;

        if (dx == 0) {
            for (int y = top; y <= bottom; ++y) {
                points.add(new Point(left, y));
            }
        } else if (dy == 0) {
            for (int x = left; x <= right; ++x) {
                points.add(new Point(x, top));
            }
        }
        cache.put(hash, points);
    }


