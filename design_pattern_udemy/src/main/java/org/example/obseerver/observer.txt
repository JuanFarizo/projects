Observer:
Is an object that wishes to be informed about events happening in the system. The entity generating the events is an observable

Motivation:
- We need to be informed when certain things happen. ie:
    Object's fields change
    Object do something
    Some external events occurs
- We want to listen to events and notified when they occur
- Typical pattern involves addXXXListener()
- Java has functional objects like Supplier<T> Consumer<T> Function<T>

Summary:
So first of all, we saw that the Observer is generally an intrusive approach, So the observable object must provide some sort of event or some sort of API to subscribe to.
You also need to take special care when it comes to multithreading and using an observable object from
multiple threads, particularly when it comes to unsubscribing from particular event.